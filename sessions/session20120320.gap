gap> g := Group([(2,3)(4,7)(5,9)(6,8), (1,3)(4,9)(5,8)(6,7), (1,4,7)(2,5,8)(3,6,9)]);
Group([ (2,3)(4,7)(5,9)(6,8), (1,3)(4,9)(5,8)(6,7), (1,4,7)(2,5,8)(3,6,9) ])
gap> StructureDescription(g);
"(C3 x C3) : C2"
gap> IsTransitive(g);
true
gap> h:=Stabilizer(g,1);
Group([ (2,3)(4,7)(5,9)(6,8) ])
gap> StructureDescription(h);
"C2"
gap> G:=Action(g,RightCosets(g,h),OnRight);
Group([ (2,3)(4,7)(5,9)(6,8), (1,2)(4,8)(5,7)(6,9), (1,4,7)(2,5,8)(3,6,9) ])
gap> StructureDescription(G);
"(C3 x C3) : C2"
gap> H:=Stabilizer(G,1);
Group([ (2,3)(4,7)(5,9)(6,8) ])
gap> intHG:=IntermediateSubgroups(G,H);
rec( subgroups := [ Group([ (2,3)(4,7)(5,9)(6,8), (1,2,3)(4,5,6)(7,8,9) ]), Group([ (2,3)(4,7)(5,9)(6,8), (1,4,7)(2,5,8)(3,6,9) ]), 
      Group([ (2,3)(4,7)(5,9)(6,8), (1,5,9)(2,6,7)(3,4,8) ]), Group([ (2,3)(4,7)(5,9)(6,8), (1,6,8)(2,4,9)(3,5,7) ]) ], 
  inclusions := [ [ 0, 1 ], [ 0, 2 ], [ 0, 3 ], [ 0, 4 ], [ 1, 5 ], [ 2, 5 ], [ 3, 5 ], [ 4, 5 ] ] )
gap> for K in intHG.subgroups do
> Print(RightCosets(G,K), "\n");
> od;
[ RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,2,3)(4,5,6)(7,8,9) ] ),()), 
  RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,2,3)(4,5,6)(7,8,9) ] ),(1,4,7)(2,5,8)(3,6,9)), 
  RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,2,3)(4,5,6)(7,8,9) ] ),(1,7,4)(2,8,5)(3,9,6)) ]
[ RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,4,7)(2,5,8)(3,6,9) ] ),()), 
  RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,4,7)(2,5,8)(3,6,9) ] ),(1,2,3)(4,5,6)(7,8,9)), 
  RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,4,7)(2,5,8)(3,6,9) ] ),(1,3,2)(4,6,5)(7,9,8)) ]
[ RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,5,9)(2,6,7)(3,4,8) ] ),()), 
  RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,5,9)(2,6,7)(3,4,8) ] ),(1,2,3)(4,5,6)(7,8,9)), 
  RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,5,9)(2,6,7)(3,4,8) ] ),(1,3,2)(4,6,5)(7,9,8)) ]
[ RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,6,8)(2,4,9)(3,5,7) ] ),()), 
  RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,6,8)(2,4,9)(3,5,7) ] ),(1,2,3)(4,5,6)(7,8,9)), 
  RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,6,8)(2,4,9)(3,5,7) ] ),(1,3,2)(4,6,5)(7,9,8)) ]
gap> K:=intHG.subgroups[1];
Group([ (2,3)(4,7)(5,9)(6,8), (1,2,3)(4,5,6)(7,8,9) ])
gap> StructureDescription(K);
"S3"
gap> RightCosets(G,K);
[ RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,2,3)(4,5,6)(7,8,9) ] ),()), 
  RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,2,3)(4,5,6)(7,8,9) ] ),(1,4,7)(2,5,8)(3,6,9)), 
  RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,2,3)(4,5,6)(7,8,9) ] ),(1,7,4)(2,8,5)(3,9,6)) ]
gap> Orbit(K,1);
[ 2, 3, 1 ]
gap> for k in intHG.subgroups do
> Print(Orbit(k, 1), "\n");
> od;
[ 2, 3, 1 ]
[ 1, 7, 4 ]
[ 1, 9, 5 ]
[ 1, 8, 6 ]
gap> AsList(RightCosets(G,K));
[ RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,2,3)(4,5,6)(7,8,9) ] ),()), 
  RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,2,3)(4,5,6)(7,8,9) ] ),(1,4,7)(2,5,8)(3,6,9)), 
  RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,2,3)(4,5,6)(7,8,9) ] ),(1,7,4)(2,8,5)(3,9,6)) ]
gap> AsList(RightCosets(G,K)[1]);
[ (), (1,2,3)(4,5,6)(7,8,9), (1,3,2)(4,6,5)(7,9,8), (2,3)(4,7)(5,9)(6,8), (1,2)(4,8)(5,7)(6,9), (1,3)(4,9)(5,8)(6,7) ]
gap> AsList(RightCosets(G,K)[2]);
[ (1,4,7)(2,5,8)(3,6,9), (1,5,9)(2,6,7)(3,4,8), (1,6,8)(2,4,9)(3,5,7), (1,4)(2,6)(3,5)(8,9), (1,5)(2,4)(3,6)(7,8), (1,6)(2,5)(3,4)(7,9) ]
gap> Orbit(RightCosets(G,K)[2],1);
Error, no method found! For debugging hints type ?Recovery from NoMethodFound
Error, no 1st choice method found for `PROD' on 2 arguments called from
act( pt, v ) called from
DoPcgsOrbitOp( G, false, pt, U, V, act ) called from
orbish( G, pnt, gens, acts, act ) called from
<function>( <arguments> ) called from read-eval-loop
Entering break read-eval-print loop ...
you can 'quit;' to quit to outer loop, or
you can 'return;' to continue
brk> quit;
gap> K;
S3
gap> Orbit(K,4);
[ 4, 7, 6, 9, 8, 5 ]
gap> Orbit(K,1);
[ 2, 3, 1 ]
gap> K:=intHG.subgroups[1];
S3
gap> RightCosets(G,K);
[ RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,2,3)(4,5,6)(7,8,9) ] ),()), 
  RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,2,3)(4,5,6)(7,8,9) ] ),(1,4,7)(2,5,8)(3,6,9)), 
  RightCoset(Group( [ (2,3)(4,7)(5,9)(6,8), (1,2,3)(4,5,6)(7,8,9) ] ),(1,7,4)(2,8,5)(3,9,6)) ]
gap> Orbit(K,1);
[ 2, 3, 1 ]
gap> Orbit(K,4);
[ 4, 7, 6, 9, 8, 5 ]
gap> Orbit(K,2);
[ 2, 3, 1 ]
gap> Orbit(K,3);
[ 2, 3, 1 ]
gap> Orbit(K,4);
[ 4, 7, 6, 9, 8, 5 ]
gap> Orbit(K,5);
[ 5, 9, 4, 8, 7, 6 ]
gap> Orbit(K,6);
[ 6, 8, 5, 7, 9, 4 ]
gap> Orbit(K,7);
[ 7, 4, 9, 6, 5, 8 ]
gap> Orbit(K,8);
[ 8, 6, 7, 5, 4, 9 ]
gap> List(AsList(RightCosets(G,K)[2]), x->1^x);
[ 4, 5, 6, 4, 5, 6 ]
gap> List(AsList(RightCosets(G,K)[3]), x->1^x);
[ 7, 8, 9, 7, 8, 9 ]
gap> Set(AsList(RightCosets(G,K)[3]), x->1^x);
[ 7, 8, 9 ]
gap> Set(AsList(RightCosets(G,K)[2]), x->1^x);
[ 4, 5, 6 ]
gap> Set(AsList(RightCosets(G,K)[1]), x->1^x);
[ 1, 2, 3 ]
gap> K:=intHG.subgroups[2];
Group([ (2,3)(4,7)(5,9)(6,8), (1,4,7)(2,5,8)(3,6,9) ])
gap> Set(AsList(RightCosets(G,K)[1]), x->1^x);
[ 1, 4, 7 ]
gap> Set(AsList(RightCosets(G,K)[2]), x->1^x);
[ 2, 5, 8 ]
gap> Set(AsList(RightCosets(G,K)[3]), x->1^x);
[ 3, 6, 9 ]
gap> K:=intHG.subgroups[3];
Group([ (2,3)(4,7)(5,9)(6,8), (1,5,9)(2,6,7)(3,4,8) ])
gap> List([1..3], x->Set(AsList(RightCosets(G,K)[2]), x->1^x));
[ [ 2, 6, 7 ], [ 2, 6, 7 ], [ 2, 6, 7 ] ]
gap> List([1..3], y->Set(AsList(RightCosets(G,K)[y]), x->1^x));
[ [ 1, 5, 9 ], [ 2, 6, 7 ], [ 3, 4, 8 ] ]
gap> K:=intHG.subgroups[4];
Group([ (2,3)(4,7)(5,9)(6,8), (1,6,8)(2,4,9)(3,5,7) ])
gap> List([1..3], y->Set(AsList(RightCosets(G,K)[y]), x->1^x));
[ [ 1, 6, 8 ], [ 2, 4, 9 ], [ 3, 5, 7 ] ]
gap> for b in AllBlocks(G) do Print(Orbit(G,b,OnSets), "\n"); od;
[ [ 1, 2, 3 ], [ 7, 8, 9 ], [ 4, 5, 6 ] ]
[ [ 1, 4, 7 ], [ 3, 6, 9 ], [ 2, 5, 8 ] ]
[ [ 1, 5, 9 ], [ 3, 4, 8 ], [ 2, 6, 7 ] ]
[ [ 1, 6, 8 ], [ 3, 5, 7 ], [ 2, 4, 9 ] ]
gap> g1:=(1,4,7)(2,5,8)(3,6,9);
(1,4,7)(2,5,8)(3,6,9)
gap> intHG.subgroups[1]^g1;
Group([ (1,7)(2,9)(3,8)(5,6), (1,2,3)(4,5,6)(7,8,9) ])
gap> Orbit(intHG.subgroups[1]^g1,1);
[ 1, 7, 3, 9, 8, 2 ]
gap> Orbit(intHG.subgroups[1]^g1,4);
[ 5, 6, 4 ]
gap> g2:=(1,7,4)(2,8,5)(3,9,6);
(1,7,4)(2,8,5)(3,9,6)
gap> Orbit(intHG.subgroups[1]^g2,7);
[ 8, 9, 7 ]
gap> A5:=AlternatingGroup(5);
Alt( [ 1 .. 5 ] )
gap> mscr:=MaximalSubgroupClassReps(A5);
[ Group([ (1,2,3), (1,2)(4,5) ]), Alt( [ 1 .. 4 ] ), Group([ (2,4)(3,5), (1,2,3,5,4) ]) ]
gap> List(mscr, x->Normalizer(A5,x));
[ Group([ (2,3)(4,5), (1,2,3) ]), Group([ (1,2,3), (2,3,4) ]), Group([ (2,4)(3,5), (1,2,3,5,4) ]) ]
gap> StructureDescription(mscr[3]);
"D10"
gap> S3:=SymmetricGroup(3);
Sym( [ 1 .. 3 ] )
gap> G:=DirectProduct(S3,S3,S3);
Group([ (1,2,3), (1,2), (4,5,6), (4,5), (7,8,9), (7,8) ])
gap> emb1:=Embedding(G,1);; emb2:=Embedding(G,2);; emb3:=Embedding(G,3);;
gap> diag:=List(GeneratorsOfGroup(S3), i->Image(emb1,i)*Image(emb2,i)*Image(emb3,i));
[ (1,2,3)(4,5,6)(7,8,9), (1,2)(4,5)(7,8) ]
gap> U:=Group(diag,());;
gap> IsSubgroup(G,U);          # returns true
true
gap> H:=Group(Concatenation(diag, [(1,2,3)]),());
Group([ (1,2,3)(4,5,6)(7,8,9), (1,2)(4,5)(7,8), (1,2,3) ])
gap> K:=Group(Concatenation(diag, [(4,5,6)]),());
Group([ (1,2,3)(4,5,6)(7,8,9), (1,2)(4,5)(7,8), (4,5,6) ])
gap> IsSubgroup(G,H);          # returns true
true
gap> IsSubgroup(G,K);          # returns true
true
gap> setproduct:=function(x,y) return x*y; end;
function( x, y ) ... end
gap> ListX(AsList(H),AsList(K),setproduct);
[ (), (4,5,6), (4,6,5), (2,3)(5,6)(8,9), (2,3)(4,5)(8,9), (2,3)(4,6)(8,9), (1,2)(5,6)(7,8), (1,2)(4,5)(7,8), (1,2)(4,6)(7,8), 
  (1,2,3)(7,8,9), (1,2,3)(4,5,6)(7,8,9), (1,2,3)(4,6,5)(7,8,9), (1,3,2)(7,9,8), (1,3,2)(4,5,6)(7,9,8), (1,3,2)(4,6,5)(7,9,8), 
  (1,3)(5,6)(7,9), (1,3)(4,5)(7,9), (1,3)(4,6)(7,9), (4,5,6)(7,8,9), (4,6,5)(7,8,9), (7,8,9), (2,3)(4,6)(7,9), (2,3)(5,6)(7,9), 
  (2,3)(4,5)(7,9), (1,2)(4,6)(8,9), (1,2)(5,6)(8,9), (1,2)(4,5)(8,9), (1,2,3)(4,5,6)(7,9,8), (1,2,3)(4,6,5)(7,9,8), (1,2,3)(7,9,8), 
  (1,3,2)(4,5,6), (1,3,2)(4,6,5), (1,3,2), (1,3)(4,6)(7,8), (1,3)(5,6)(7,8), (1,3)(4,5)(7,8), (4,6,5)(7,9,8), (7,9,8), (4,5,6)(7,9,8), 
  (2,3)(4,5)(7,8), (2,3)(4,6)(7,8), (2,3)(5,6)(7,8), (1,2)(4,5)(7,9), (1,2)(4,6)(7,9), (1,2)(5,6)(7,9), (1,2,3)(4,6,5), (1,2,3), 
  (1,2,3)(4,5,6), (1,3,2)(4,6,5)(7,8,9), (1,3,2)(7,8,9), (1,3,2)(4,5,6)(7,8,9), (1,3)(4,5)(8,9), (1,3)(4,6)(8,9), (1,3)(5,6)(8,9), 
  (2,3)(5,6)(8,9), (2,3)(4,5)(8,9), (2,3)(4,6)(8,9), (), (4,5,6), (4,6,5), (1,2,3)(7,8,9), (1,2,3)(4,5,6)(7,8,9), (1,2,3)(4,6,5)(7,8,9), 
  (1,2)(5,6)(7,8), (1,2)(4,5)(7,8), (1,2)(4,6)(7,8), (1,3)(5,6)(7,9), (1,3)(4,5)(7,9), (1,3)(4,6)(7,9), (1,3,2)(7,9,8), 
  (1,3,2)(4,5,6)(7,9,8), (1,3,2)(4,6,5)(7,9,8), (2,3)(4,5)(7,8), (2,3)(4,6)(7,8), (2,3)(5,6)(7,8), (4,6,5)(7,9,8), (7,9,8), 
  (4,5,6)(7,9,8), (1,2,3)(4,6,5), (1,2,3), (1,2,3)(4,5,6), (1,2)(4,5)(7,9), (1,2)(4,6)(7,9), (1,2)(5,6)(7,9), (1,3)(4,5)(8,9), 
  (1,3)(4,6)(8,9), (1,3)(5,6)(8,9), (1,3,2)(4,6,5)(7,8,9), (1,3,2)(7,8,9), (1,3,2)(4,5,6)(7,8,9), (2,3)(4,6)(7,9), (2,3)(5,6)(7,9), 
  (2,3)(4,5)(7,9), (4,5,6)(7,8,9), (4,6,5)(7,8,9), (7,8,9), (1,2,3)(4,5,6)(7,9,8), (1,2,3)(4,6,5)(7,9,8), (1,2,3)(7,9,8), (1,2)(4,6)(8,9),
  (1,2)(5,6)(8,9), (1,2)(4,5)(8,9), (1,3)(4,6)(7,8), (1,3)(5,6)(7,8), (1,3)(4,5)(7,8), (1,3,2)(4,5,6), (1,3,2)(4,6,5), (1,3,2), 
  (1,2)(5,6)(8,9), (1,2)(4,5)(8,9), (1,2)(4,6)(8,9), (1,3,2), (1,3,2)(4,5,6), (1,3,2)(4,6,5), (7,8,9), (4,5,6)(7,8,9), (4,6,5)(7,8,9), 
  (1,3)(5,6)(7,8), (1,3)(4,5)(7,8), (1,3)(4,6)(7,8), (2,3)(5,6)(7,9), (2,3)(4,5)(7,9), (2,3)(4,6)(7,9), (1,2,3)(7,9,8), 
  (1,2,3)(4,5,6)(7,9,8), (1,2,3)(4,6,5)(7,9,8), (1,2)(4,5)(7,8), (1,2)(4,6)(7,8), (1,2)(5,6)(7,8), (1,3,2)(4,6,5)(7,9,8), (1,3,2)(7,9,8), 
  (1,3,2)(4,5,6)(7,9,8), (4,6,5), (), (4,5,6), (1,3)(4,5)(7,9), (1,3)(4,6)(7,9), (1,3)(5,6)(7,9), (2,3)(4,5)(8,9), (2,3)(4,6)(8,9), 
  (2,3)(5,6)(8,9), (1,2,3)(4,6,5)(7,8,9), (1,2,3)(7,8,9), (1,2,3)(4,5,6)(7,8,9), (1,2)(4,6)(7,9), (1,2)(5,6)(7,9), (1,2)(4,5)(7,9), 
  (1,3,2)(4,5,6)(7,8,9), (1,3,2)(4,6,5)(7,8,9), (1,3,2)(7,8,9), (4,5,6)(7,9,8), (4,6,5)(7,9,8), (7,9,8), (1,3)(4,6)(8,9), (1,3)(5,6)(8,9),
  (1,3)(4,5)(8,9), (2,3)(4,6)(7,8), (2,3)(5,6)(7,8), (2,3)(4,5)(7,8), (1,2,3)(4,5,6), (1,2,3)(4,6,5), (1,2,3), (1,2,3), (1,2,3)(4,5,6), 
  (1,2,3)(4,6,5), (1,3)(5,6)(8,9), (1,3)(4,5)(8,9), (1,3)(4,6)(8,9), (2,3)(5,6)(7,8), (2,3)(4,5)(7,8), (2,3)(4,6)(7,8), (1,3,2)(7,8,9), 
  (1,3,2)(4,5,6)(7,8,9), (1,3,2)(4,6,5)(7,8,9), (7,9,8), (4,5,6)(7,9,8), (4,6,5)(7,9,8), (1,2)(5,6)(7,9), (1,2)(4,5)(7,9), 
  (1,2)(4,6)(7,9), (1,2,3)(4,5,6)(7,8,9), (1,2,3)(4,6,5)(7,8,9), (1,2,3)(7,8,9), (1,3)(4,6)(7,9), (1,3)(5,6)(7,9), (1,3)(4,5)(7,9), 
  (2,3)(4,6)(8,9), (2,3)(5,6)(8,9), (2,3)(4,5)(8,9), (1,3,2)(4,5,6)(7,9,8), (1,3,2)(4,6,5)(7,9,8), (1,3,2)(7,9,8), (4,5,6), (4,6,5), (), 
  (1,2)(4,6)(7,8), (1,2)(5,6)(7,8), (1,2)(4,5)(7,8), (1,2,3)(4,6,5)(7,9,8), (1,2,3)(7,9,8), (1,2,3)(4,5,6)(7,9,8), (1,3)(4,5)(7,8), 
  (1,3)(4,6)(7,8), (1,3)(5,6)(7,8), (2,3)(4,5)(7,9), (2,3)(4,6)(7,9), (2,3)(5,6)(7,9), (1,3,2)(4,6,5), (1,3,2), (1,3,2)(4,5,6), 
  (4,6,5)(7,8,9), (7,8,9), (4,5,6)(7,8,9), (1,2)(4,5)(8,9), (1,2)(4,6)(8,9), (1,2)(5,6)(8,9), (1,3,2), (1,3,2)(4,5,6), (1,3,2)(4,6,5), 
  (1,2)(5,6)(8,9), (1,2)(4,5)(8,9), (1,2)(4,6)(8,9), (1,3)(5,6)(7,8), (1,3)(4,5)(7,8), (1,3)(4,6)(7,8), (7,8,9), (4,5,6)(7,8,9), 
  (4,6,5)(7,8,9), (1,2,3)(7,9,8), (1,2,3)(4,5,6)(7,9,8), (1,2,3)(4,6,5)(7,9,8), (2,3)(5,6)(7,9), (2,3)(4,5)(7,9), (2,3)(4,6)(7,9), 
  (1,3,2)(4,5,6)(7,8,9), (1,3,2)(4,6,5)(7,8,9), (1,3,2)(7,8,9), (1,2)(4,6)(7,9), (1,2)(5,6)(7,9), (1,2)(4,5)(7,9), (1,3)(4,6)(8,9), 
  (1,3)(5,6)(8,9), (1,3)(4,5)(8,9), (4,5,6)(7,9,8), (4,6,5)(7,9,8), (7,9,8), (1,2,3)(4,5,6), (1,2,3)(4,6,5), (1,2,3), (2,3)(4,6)(7,8), 
  (2,3)(5,6)(7,8), (2,3)(4,5)(7,8), (1,3,2)(4,6,5)(7,9,8), (1,3,2)(7,9,8), (1,3,2)(4,5,6)(7,9,8), (1,2)(4,5)(7,8), (1,2)(4,6)(7,8), 
  (1,2)(5,6)(7,8), (1,3)(4,5)(7,9), (1,3)(4,6)(7,9), (1,3)(5,6)(7,9), (4,6,5), (), (4,5,6), (1,2,3)(4,6,5)(7,8,9), (1,2,3)(7,8,9), 
  (1,2,3)(4,5,6)(7,8,9), (2,3)(4,5)(8,9), (2,3)(4,6)(8,9), (2,3)(5,6)(8,9), (1,3)(5,6)(8,9), (1,3)(4,5)(8,9), (1,3)(4,6)(8,9), (1,2,3), 
  (1,2,3)(4,5,6), (1,2,3)(4,6,5), (1,3,2)(7,8,9), (1,3,2)(4,5,6)(7,8,9), (1,3,2)(4,6,5)(7,8,9), (2,3)(5,6)(7,8), (2,3)(4,5)(7,8), 
  (2,3)(4,6)(7,8), (1,2)(5,6)(7,9), (1,2)(4,5)(7,9), (1,2)(4,6)(7,9), (7,9,8), (4,5,6)(7,9,8), (4,6,5)(7,9,8), (1,3)(4,5)(7,8), 
  (1,3)(4,6)(7,8), (1,3)(5,6)(7,8), (1,2,3)(4,6,5)(7,9,8), (1,2,3)(7,9,8), (1,2,3)(4,5,6)(7,9,8), (1,3,2)(4,6,5), (1,3,2), 
  (1,3,2)(4,5,6), (2,3)(4,5)(7,9), (2,3)(4,6)(7,9), (2,3)(5,6)(7,9), (1,2)(4,5)(8,9), (1,2)(4,6)(8,9), (1,2)(5,6)(8,9), (4,6,5)(7,8,9), 
  (7,8,9), (4,5,6)(7,8,9), (1,3)(4,6)(7,9), (1,3)(5,6)(7,9), (1,3)(4,5)(7,9), (1,2,3)(4,5,6)(7,8,9), (1,2,3)(4,6,5)(7,8,9), 
  (1,2,3)(7,8,9), (1,3,2)(4,5,6)(7,9,8), (1,3,2)(4,6,5)(7,9,8), (1,3,2)(7,9,8), (2,3)(4,6)(8,9), (2,3)(5,6)(8,9), (2,3)(4,5)(8,9), 
  (1,2)(4,6)(7,8), (1,2)(5,6)(7,8), (1,2)(4,5)(7,8), (4,5,6), (4,6,5), () ]
gap> Group([ListX(AsList(H),AsList(K),setproduct)]);
Error, usage: Group(<gen>,...), Group(<gens>), Group(<gens>,<id>) called from
<function>( <arguments> ) called from read-eval-loop
Entering break read-eval-print loop ...
you can 'quit;' to quit to outer loop, or
you can 'return;' to continue
brk> quit;
gap> LL:=ListX(AsList(H),AsList(K),setproduct);
[ (), (4,5,6), (4,6,5), (2,3)(5,6)(8,9), (2,3)(4,5)(8,9), (2,3)(4,6)(8,9), (1,2)(5,6)(7,8), (1,2)(4,5)(7,8), (1,2)(4,6)(7,8), 
  (1,2,3)(7,8,9), (1,2,3)(4,5,6)(7,8,9), (1,2,3)(4,6,5)(7,8,9), (1,3,2)(7,9,8), (1,3,2)(4,5,6)(7,9,8), (1,3,2)(4,6,5)(7,9,8), 
  (1,3)(5,6)(7,9), (1,3)(4,5)(7,9), (1,3)(4,6)(7,9), (4,5,6)(7,8,9), (4,6,5)(7,8,9), (7,8,9), (2,3)(4,6)(7,9), (2,3)(5,6)(7,9), 
  (2,3)(4,5)(7,9), (1,2)(4,6)(8,9), (1,2)(5,6)(8,9), (1,2)(4,5)(8,9), (1,2,3)(4,5,6)(7,9,8), (1,2,3)(4,6,5)(7,9,8), (1,2,3)(7,9,8), 
  (1,3,2)(4,5,6), (1,3,2)(4,6,5), (1,3,2), (1,3)(4,6)(7,8), (1,3)(5,6)(7,8), (1,3)(4,5)(7,8), (4,6,5)(7,9,8), (7,9,8), (4,5,6)(7,9,8), 
  (2,3)(4,5)(7,8), (2,3)(4,6)(7,8), (2,3)(5,6)(7,8), (1,2)(4,5)(7,9), (1,2)(4,6)(7,9), (1,2)(5,6)(7,9), (1,2,3)(4,6,5), (1,2,3), 
  (1,2,3)(4,5,6), (1,3,2)(4,6,5)(7,8,9), (1,3,2)(7,8,9), (1,3,2)(4,5,6)(7,8,9), (1,3)(4,5)(8,9), (1,3)(4,6)(8,9), (1,3)(5,6)(8,9), 
  (2,3)(5,6)(8,9), (2,3)(4,5)(8,9), (2,3)(4,6)(8,9), (), (4,5,6), (4,6,5), (1,2,3)(7,8,9), (1,2,3)(4,5,6)(7,8,9), (1,2,3)(4,6,5)(7,8,9), 
  (1,2)(5,6)(7,8), (1,2)(4,5)(7,8), (1,2)(4,6)(7,8), (1,3)(5,6)(7,9), (1,3)(4,5)(7,9), (1,3)(4,6)(7,9), (1,3,2)(7,9,8), 
  (1,3,2)(4,5,6)(7,9,8), (1,3,2)(4,6,5)(7,9,8), (2,3)(4,5)(7,8), (2,3)(4,6)(7,8), (2,3)(5,6)(7,8), (4,6,5)(7,9,8), (7,9,8), 
  (4,5,6)(7,9,8), (1,2,3)(4,6,5), (1,2,3), (1,2,3)(4,5,6), (1,2)(4,5)(7,9), (1,2)(4,6)(7,9), (1,2)(5,6)(7,9), (1,3)(4,5)(8,9), 
  (1,3)(4,6)(8,9), (1,3)(5,6)(8,9), (1,3,2)(4,6,5)(7,8,9), (1,3,2)(7,8,9), (1,3,2)(4,5,6)(7,8,9), (2,3)(4,6)(7,9), (2,3)(5,6)(7,9), 
  (2,3)(4,5)(7,9), (4,5,6)(7,8,9), (4,6,5)(7,8,9), (7,8,9), (1,2,3)(4,5,6)(7,9,8), (1,2,3)(4,6,5)(7,9,8), (1,2,3)(7,9,8), (1,2)(4,6)(8,9),
  (1,2)(5,6)(8,9), (1,2)(4,5)(8,9), (1,3)(4,6)(7,8), (1,3)(5,6)(7,8), (1,3)(4,5)(7,8), (1,3,2)(4,5,6), (1,3,2)(4,6,5), (1,3,2), 
  (1,2)(5,6)(8,9), (1,2)(4,5)(8,9), (1,2)(4,6)(8,9), (1,3,2), (1,3,2)(4,5,6), (1,3,2)(4,6,5), (7,8,9), (4,5,6)(7,8,9), (4,6,5)(7,8,9), 
  (1,3)(5,6)(7,8), (1,3)(4,5)(7,8), (1,3)(4,6)(7,8), (2,3)(5,6)(7,9), (2,3)(4,5)(7,9), (2,3)(4,6)(7,9), (1,2,3)(7,9,8), 
  (1,2,3)(4,5,6)(7,9,8), (1,2,3)(4,6,5)(7,9,8), (1,2)(4,5)(7,8), (1,2)(4,6)(7,8), (1,2)(5,6)(7,8), (1,3,2)(4,6,5)(7,9,8), (1,3,2)(7,9,8), 
  (1,3,2)(4,5,6)(7,9,8), (4,6,5), (), (4,5,6), (1,3)(4,5)(7,9), (1,3)(4,6)(7,9), (1,3)(5,6)(7,9), (2,3)(4,5)(8,9), (2,3)(4,6)(8,9), 
  (2,3)(5,6)(8,9), (1,2,3)(4,6,5)(7,8,9), (1,2,3)(7,8,9), (1,2,3)(4,5,6)(7,8,9), (1,2)(4,6)(7,9), (1,2)(5,6)(7,9), (1,2)(4,5)(7,9), 
  (1,3,2)(4,5,6)(7,8,9), (1,3,2)(4,6,5)(7,8,9), (1,3,2)(7,8,9), (4,5,6)(7,9,8), (4,6,5)(7,9,8), (7,9,8), (1,3)(4,6)(8,9), (1,3)(5,6)(8,9),
  (1,3)(4,5)(8,9), (2,3)(4,6)(7,8), (2,3)(5,6)(7,8), (2,3)(4,5)(7,8), (1,2,3)(4,5,6), (1,2,3)(4,6,5), (1,2,3), (1,2,3), (1,2,3)(4,5,6), 
  (1,2,3)(4,6,5), (1,3)(5,6)(8,9), (1,3)(4,5)(8,9), (1,3)(4,6)(8,9), (2,3)(5,6)(7,8), (2,3)(4,5)(7,8), (2,3)(4,6)(7,8), (1,3,2)(7,8,9), 
  (1,3,2)(4,5,6)(7,8,9), (1,3,2)(4,6,5)(7,8,9), (7,9,8), (4,5,6)(7,9,8), (4,6,5)(7,9,8), (1,2)(5,6)(7,9), (1,2)(4,5)(7,9), 
  (1,2)(4,6)(7,9), (1,2,3)(4,5,6)(7,8,9), (1,2,3)(4,6,5)(7,8,9), (1,2,3)(7,8,9), (1,3)(4,6)(7,9), (1,3)(5,6)(7,9), (1,3)(4,5)(7,9), 
  (2,3)(4,6)(8,9), (2,3)(5,6)(8,9), (2,3)(4,5)(8,9), (1,3,2)(4,5,6)(7,9,8), (1,3,2)(4,6,5)(7,9,8), (1,3,2)(7,9,8), (4,5,6), (4,6,5), (), 
  (1,2)(4,6)(7,8), (1,2)(5,6)(7,8), (1,2)(4,5)(7,8), (1,2,3)(4,6,5)(7,9,8), (1,2,3)(7,9,8), (1,2,3)(4,5,6)(7,9,8), (1,3)(4,5)(7,8), 
  (1,3)(4,6)(7,8), (1,3)(5,6)(7,8), (2,3)(4,5)(7,9), (2,3)(4,6)(7,9), (2,3)(5,6)(7,9), (1,3,2)(4,6,5), (1,3,2), (1,3,2)(4,5,6), 
  (4,6,5)(7,8,9), (7,8,9), (4,5,6)(7,8,9), (1,2)(4,5)(8,9), (1,2)(4,6)(8,9), (1,2)(5,6)(8,9), (1,3,2), (1,3,2)(4,5,6), (1,3,2)(4,6,5), 
  (1,2)(5,6)(8,9), (1,2)(4,5)(8,9), (1,2)(4,6)(8,9), (1,3)(5,6)(7,8), (1,3)(4,5)(7,8), (1,3)(4,6)(7,8), (7,8,9), (4,5,6)(7,8,9), 
  (4,6,5)(7,8,9), (1,2,3)(7,9,8), (1,2,3)(4,5,6)(7,9,8), (1,2,3)(4,6,5)(7,9,8), (2,3)(5,6)(7,9), (2,3)(4,5)(7,9), (2,3)(4,6)(7,9), 
  (1,3,2)(4,5,6)(7,8,9), (1,3,2)(4,6,5)(7,8,9), (1,3,2)(7,8,9), (1,2)(4,6)(7,9), (1,2)(5,6)(7,9), (1,2)(4,5)(7,9), (1,3)(4,6)(8,9), 
  (1,3)(5,6)(8,9), (1,3)(4,5)(8,9), (4,5,6)(7,9,8), (4,6,5)(7,9,8), (7,9,8), (1,2,3)(4,5,6), (1,2,3)(4,6,5), (1,2,3), (2,3)(4,6)(7,8), 
  (2,3)(5,6)(7,8), (2,3)(4,5)(7,8), (1,3,2)(4,6,5)(7,9,8), (1,3,2)(7,9,8), (1,3,2)(4,5,6)(7,9,8), (1,2)(4,5)(7,8), (1,2)(4,6)(7,8), 
  (1,2)(5,6)(7,8), (1,3)(4,5)(7,9), (1,3)(4,6)(7,9), (1,3)(5,6)(7,9), (4,6,5), (), (4,5,6), (1,2,3)(4,6,5)(7,8,9), (1,2,3)(7,8,9), 
  (1,2,3)(4,5,6)(7,8,9), (2,3)(4,5)(8,9), (2,3)(4,6)(8,9), (2,3)(5,6)(8,9), (1,3)(5,6)(8,9), (1,3)(4,5)(8,9), (1,3)(4,6)(8,9), (1,2,3), 
  (1,2,3)(4,5,6), (1,2,3)(4,6,5), (1,3,2)(7,8,9), (1,3,2)(4,5,6)(7,8,9), (1,3,2)(4,6,5)(7,8,9), (2,3)(5,6)(7,8), (2,3)(4,5)(7,8), 
  (2,3)(4,6)(7,8), (1,2)(5,6)(7,9), (1,2)(4,5)(7,9), (1,2)(4,6)(7,9), (7,9,8), (4,5,6)(7,9,8), (4,6,5)(7,9,8), (1,3)(4,5)(7,8), 
  (1,3)(4,6)(7,8), (1,3)(5,6)(7,8), (1,2,3)(4,6,5)(7,9,8), (1,2,3)(7,9,8), (1,2,3)(4,5,6)(7,9,8), (1,3,2)(4,6,5), (1,3,2), 
  (1,3,2)(4,5,6), (2,3)(4,5)(7,9), (2,3)(4,6)(7,9), (2,3)(5,6)(7,9), (1,2)(4,5)(8,9), (1,2)(4,6)(8,9), (1,2)(5,6)(8,9), (4,6,5)(7,8,9), 
  (7,8,9), (4,5,6)(7,8,9), (1,3)(4,6)(7,9), (1,3)(5,6)(7,9), (1,3)(4,5)(7,9), (1,2,3)(4,5,6)(7,8,9), (1,2,3)(4,6,5)(7,8,9), 
  (1,2,3)(7,8,9), (1,3,2)(4,5,6)(7,9,8), (1,3,2)(4,6,5)(7,9,8), (1,3,2)(7,9,8), (2,3)(4,6)(8,9), (2,3)(5,6)(8,9), (2,3)(4,5)(8,9), 
  (1,2)(4,6)(7,8), (1,2)(5,6)(7,8), (1,2)(4,5)(7,8), (4,5,6), (4,6,5), () ]
gap> Lenth(LL);
Variable: 'Lenth' must have a value

gap> Length(LL);
324
gap> LL:=LL[2..324];
Syntax error: ] expected
LL:=LL[2..324];
         ^
gap> LL;
[ (), (4,5,6), (4,6,5), (2,3)(5,6)(8,9), (2,3)(4,5)(8,9), (2,3)(4,6)(8,9), (1,2)(5,6)(7,8), (1,2)(4,5)(7,8), (1,2)(4,6)(7,8), 
  (1,2,3)(7,8,9), (1,2,3)(4,5,6)(7,8,9), (1,2,3)(4,6,5)(7,8,9), (1,3,2)(7,9,8), (1,3,2)(4,5,6)(7,9,8), (1,3,2)(4,6,5)(7,9,8), 
  (1,3)(5,6)(7,9), (1,3)(4,5)(7,9), (1,3)(4,6)(7,9), (4,5,6)(7,8,9), (4,6,5)(7,8,9), (7,8,9), (2,3)(4,6)(7,9), (2,3)(5,6)(7,9), 
  (2,3)(4,5)(7,9), (1,2)(4,6)(8,9), (1,2)(5,6)(8,9), (1,2)(4,5)(8,9), (1,2,3)(4,5,6)(7,9,8), (1,2,3)(4,6,5)(7,9,8), (1,2,3)(7,9,8), 
  (1,3,2)(4,5,6), (1,3,2)(4,6,5), (1,3,2), (1,3)(4,6)(7,8), (1,3)(5,6)(7,8), (1,3)(4,5)(7,8), (4,6,5)(7,9,8), (7,9,8), (4,5,6)(7,9,8), 
  (2,3)(4,5)(7,8), (2,3)(4,6)(7,8), (2,3)(5,6)(7,8), (1,2)(4,5)(7,9), (1,2)(4,6)(7,9), (1,2)(5,6)(7,9), (1,2,3)(4,6,5), (1,2,3), 
  (1,2,3)(4,5,6), (1,3,2)(4,6,5)(7,8,9), (1,3,2)(7,8,9), (1,3,2)(4,5,6)(7,8,9), (1,3)(4,5)(8,9), (1,3)(4,6)(8,9), (1,3)(5,6)(8,9), 
  (2,3)(5,6)(8,9), (2,3)(4,5)(8,9), (2,3)(4,6)(8,9), (), (4,5,6), (4,6,5), (1,2,3)(7,8,9), (1,2,3)(4,5,6)(7,8,9), (1,2,3)(4,6,5)(7,8,9), 
  (1,2)(5,6)(7,8), (1,2)(4,5)(7,8), (1,2)(4,6)(7,8), (1,3)(5,6)(7,9), (1,3)(4,5)(7,9), (1,3)(4,6)(7,9), (1,3,2)(7,9,8), 
  (1,3,2)(4,5,6)(7,9,8), (1,3,2)(4,6,5)(7,9,8), (2,3)(4,5)(7,8), (2,3)(4,6)(7,8), (2,3)(5,6)(7,8), (4,6,5)(7,9,8), (7,9,8), 
  (4,5,6)(7,9,8), (1,2,3)(4,6,5), (1,2,3), (1,2,3)(4,5,6), (1,2)(4,5)(7,9), (1,2)(4,6)(7,9), (1,2)(5,6)(7,9), (1,3)(4,5)(8,9), 
  (1,3)(4,6)(8,9), (1,3)(5,6)(8,9), (1,3,2)(4,6,5)(7,8,9), (1,3,2)(7,8,9), (1,3,2)(4,5,6)(7,8,9), (2,3)(4,6)(7,9), (2,3)(5,6)(7,9), 
  (2,3)(4,5)(7,9), (4,5,6)(7,8,9), (4,6,5)(7,8,9), (7,8,9), (1,2,3)(4,5,6)(7,9,8), (1,2,3)(4,6,5)(7,9,8), (1,2,3)(7,9,8), (1,2)(4,6)(8,9),
  (1,2)(5,6)(8,9), (1,2)(4,5)(8,9), (1,3)(4,6)(7,8), (1,3)(5,6)(7,8), (1,3)(4,5)(7,8), (1,3,2)(4,5,6), (1,3,2)(4,6,5), (1,3,2), 
  (1,2)(5,6)(8,9), (1,2)(4,5)(8,9), (1,2)(4,6)(8,9), (1,3,2), (1,3,2)(4,5,6), (1,3,2)(4,6,5), (7,8,9), (4,5,6)(7,8,9), (4,6,5)(7,8,9), 
  (1,3)(5,6)(7,8), (1,3)(4,5)(7,8), (1,3)(4,6)(7,8), (2,3)(5,6)(7,9), (2,3)(4,5)(7,9), (2,3)(4,6)(7,9), (1,2,3)(7,9,8), 
  (1,2,3)(4,5,6)(7,9,8), (1,2,3)(4,6,5)(7,9,8), (1,2)(4,5)(7,8), (1,2)(4,6)(7,8), (1,2)(5,6)(7,8), (1,3,2)(4,6,5)(7,9,8), (1,3,2)(7,9,8), 
  (1,3,2)(4,5,6)(7,9,8), (4,6,5), (), (4,5,6), (1,3)(4,5)(7,9), (1,3)(4,6)(7,9), (1,3)(5,6)(7,9), (2,3)(4,5)(8,9), (2,3)(4,6)(8,9), 
  (2,3)(5,6)(8,9), (1,2,3)(4,6,5)(7,8,9), (1,2,3)(7,8,9), (1,2,3)(4,5,6)(7,8,9), (1,2)(4,6)(7,9), (1,2)(5,6)(7,9), (1,2)(4,5)(7,9), 
  (1,3,2)(4,5,6)(7,8,9), (1,3,2)(4,6,5)(7,8,9), (1,3,2)(7,8,9), (4,5,6)(7,9,8), (4,6,5)(7,9,8), (7,9,8), (1,3)(4,6)(8,9), (1,3)(5,6)(8,9),
  (1,3)(4,5)(8,9), (2,3)(4,6)(7,8), (2,3)(5,6)(7,8), (2,3)(4,5)(7,8), (1,2,3)(4,5,6), (1,2,3)(4,6,5), (1,2,3), (1,2,3), (1,2,3)(4,5,6), 
  (1,2,3)(4,6,5), (1,3)(5,6)(8,9), (1,3)(4,5)(8,9), (1,3)(4,6)(8,9), (2,3)(5,6)(7,8), (2,3)(4,5)(7,8), (2,3)(4,6)(7,8), (1,3,2)(7,8,9), 
  (1,3,2)(4,5,6)(7,8,9), (1,3,2)(4,6,5)(7,8,9), (7,9,8), (4,5,6)(7,9,8), (4,6,5)(7,9,8), (1,2)(5,6)(7,9), (1,2)(4,5)(7,9), 
  (1,2)(4,6)(7,9), (1,2,3)(4,5,6)(7,8,9), (1,2,3)(4,6,5)(7,8,9), (1,2,3)(7,8,9), (1,3)(4,6)(7,9), (1,3)(5,6)(7,9), (1,3)(4,5)(7,9), 
  (2,3)(4,6)(8,9), (2,3)(5,6)(8,9), (2,3)(4,5)(8,9), (1,3,2)(4,5,6)(7,9,8), (1,3,2)(4,6,5)(7,9,8), (1,3,2)(7,9,8), (4,5,6), (4,6,5), (), 
  (1,2)(4,6)(7,8), (1,2)(5,6)(7,8), (1,2)(4,5)(7,8), (1,2,3)(4,6,5)(7,9,8), (1,2,3)(7,9,8), (1,2,3)(4,5,6)(7,9,8), (1,3)(4,5)(7,8), 
  (1,3)(4,6)(7,8), (1,3)(5,6)(7,8), (2,3)(4,5)(7,9), (2,3)(4,6)(7,9), (2,3)(5,6)(7,9), (1,3,2)(4,6,5), (1,3,2), (1,3,2)(4,5,6), 
  (4,6,5)(7,8,9), (7,8,9), (4,5,6)(7,8,9), (1,2)(4,5)(8,9), (1,2)(4,6)(8,9), (1,2)(5,6)(8,9), (1,3,2), (1,3,2)(4,5,6), (1,3,2)(4,6,5), 
  (1,2)(5,6)(8,9), (1,2)(4,5)(8,9), (1,2)(4,6)(8,9), (1,3)(5,6)(7,8), (1,3)(4,5)(7,8), (1,3)(4,6)(7,8), (7,8,9), (4,5,6)(7,8,9), 
  (4,6,5)(7,8,9), (1,2,3)(7,9,8), (1,2,3)(4,5,6)(7,9,8), (1,2,3)(4,6,5)(7,9,8), (2,3)(5,6)(7,9), (2,3)(4,5)(7,9), (2,3)(4,6)(7,9), 
  (1,3,2)(4,5,6)(7,8,9), (1,3,2)(4,6,5)(7,8,9), (1,3,2)(7,8,9), (1,2)(4,6)(7,9), (1,2)(5,6)(7,9), (1,2)(4,5)(7,9), (1,3)(4,6)(8,9), 
  (1,3)(5,6)(8,9), (1,3)(4,5)(8,9), (4,5,6)(7,9,8), (4,6,5)(7,9,8), (7,9,8), (1,2,3)(4,5,6), (1,2,3)(4,6,5), (1,2,3), (2,3)(4,6)(7,8), 
  (2,3)(5,6)(7,8), (2,3)(4,5)(7,8), (1,3,2)(4,6,5)(7,9,8), (1,3,2)(7,9,8), (1,3,2)(4,5,6)(7,9,8), (1,2)(4,5)(7,8), (1,2)(4,6)(7,8), 
  (1,2)(5,6)(7,8), (1,3)(4,5)(7,9), (1,3)(4,6)(7,9), (1,3)(5,6)(7,9), (4,6,5), (), (4,5,6), (1,2,3)(4,6,5)(7,8,9), (1,2,3)(7,8,9), 
  (1,2,3)(4,5,6)(7,8,9), (2,3)(4,5)(8,9), (2,3)(4,6)(8,9), (2,3)(5,6)(8,9), (1,3)(5,6)(8,9), (1,3)(4,5)(8,9), (1,3)(4,6)(8,9), (1,2,3), 
  (1,2,3)(4,5,6), (1,2,3)(4,6,5), (1,3,2)(7,8,9), (1,3,2)(4,5,6)(7,8,9), (1,3,2)(4,6,5)(7,8,9), (2,3)(5,6)(7,8), (2,3)(4,5)(7,8), 
  (2,3)(4,6)(7,8), (1,2)(5,6)(7,9), (1,2)(4,5)(7,9), (1,2)(4,6)(7,9), (7,9,8), (4,5,6)(7,9,8), (4,6,5)(7,9,8), (1,3)(4,5)(7,8), 
  (1,3)(4,6)(7,8), (1,3)(5,6)(7,8), (1,2,3)(4,6,5)(7,9,8), (1,2,3)(7,9,8), (1,2,3)(4,5,6)(7,9,8), (1,3,2)(4,6,5), (1,3,2), 
  (1,3,2)(4,5,6), (2,3)(4,5)(7,9), (2,3)(4,6)(7,9), (2,3)(5,6)(7,9), (1,2)(4,5)(8,9), (1,2)(4,6)(8,9), (1,2)(5,6)(8,9), (4,6,5)(7,8,9), 
  (7,8,9), (4,5,6)(7,8,9), (1,3)(4,6)(7,9), (1,3)(5,6)(7,9), (1,3)(4,5)(7,9), (1,2,3)(4,5,6)(7,8,9), (1,2,3)(4,6,5)(7,8,9), 
  (1,2,3)(7,8,9), (1,3,2)(4,5,6)(7,9,8), (1,3,2)(4,6,5)(7,9,8), (1,3,2)(7,9,8), (2,3)(4,6)(8,9), (2,3)(5,6)(8,9), (2,3)(4,5)(8,9), 
  (1,2)(4,6)(7,8), (1,2)(5,6)(7,8), (1,2)(4,5)(7,8), (4,5,6), (4,6,5), () ]
gap> AsGroup(LL);
Group([ (7,8,9), (4,5,6), (2,3)(5,6)(8,9), (1,2)(5,6)(8,9) ])
gap> #StructureDescription
gap> gg:=AsGroup(LL);
Group([ (7,8,9), (4,5,6), (2,3)(5,6)(8,9), (1,2)(5,6)(8,9) ])
gap> StructureDescription(gg);
"(C3 x C3 x C3) : C2"
gap> StructureDescription(H);
"(C3 x C3) : C2"
gap> LogTo();
