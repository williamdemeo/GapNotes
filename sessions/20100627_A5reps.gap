gap> a5 := AlternatingGroup(5);
Alt( [ 1 .. 5 ] )
gap> Size(a5);
60
gap> a5elems := Elements(a5);
[ (), (3,4,5), (3,5,4), (2,3)(4,5), (2,3,4), (2,3,5), (2,4,3), (2,4,5), (2,4)(3,5), 
  (2,5,3), (2,5,4), (2,5)(3,4), (1,2)(4,5), (1,2)(3,4), (1,2)(3,5), (1,2,3), 
  (1,2,3,4,5), (1,2,3,5,4), (1,2,4,5,3), (1,2,4), (1,2,4,3,5), (1,2,5,4,3), (1,2,5), 
  (1,2,5,3,4), (1,3,2), (1,3,4,5,2), (1,3,5,4,2), (1,3)(4,5), (1,3,4), (1,3,5), 
  (1,3)(2,4), (1,3,2,4,5), (1,3,5,2,4), (1,3)(2,5), (1,3,2,5,4), (1,3,4,2,5), 
  (1,4,5,3,2), (1,4,2), (1,4,3,5,2), (1,4,3), (1,4,5), (1,4)(3,5), (1,4,5,2,3), 
  (1,4)(2,3), (1,4,2,3,5), (1,4,2,5,3), (1,4,3,2,5), (1,4)(2,5), (1,5,4,3,2), (1,5,2), 
  (1,5,3,4,2), (1,5,3), (1,5,4), (1,5)(3,4), (1,5,4,2,3), (1,5)(2,3), (1,5,2,3,4), 
  (1,5,2,4,3), (1,5,3,2,4), (1,5)(2,4) ]
gap> psl24 := PSL(2,4);
Group([ (3,4,5), (1,2,3) ])
gap> Size(psl24);
60
gap> sl24 := SL(2,4);
SL(2,4)
gap> size(sl24);
Variable: 'size' must have a value

gap> Size(sl24);
60
gap> Elements(sl24);
[ [ [ 0*Z(2), Z(2)^0 ], [ Z(2)^0, 0*Z(2) ] ], [ [ 0*Z(2), Z(2)^0 ], [ Z(2)^0, Z(2)^0 ] ],
  [ [ 0*Z(2), Z(2)^0 ], [ Z(2)^0, Z(2^2) ] ], 
  [ [ 0*Z(2), Z(2)^0 ], [ Z(2)^0, Z(2^2)^2 ] ], 
  [ [ 0*Z(2), Z(2^2) ], [ Z(2^2)^2, 0*Z(2) ] ], 
  [ [ 0*Z(2), Z(2^2) ], [ Z(2^2)^2, Z(2)^0 ] ], 
  [ [ 0*Z(2), Z(2^2) ], [ Z(2^2)^2, Z(2^2) ] ], 
  [ [ 0*Z(2), Z(2^2) ], [ Z(2^2)^2, Z(2^2)^2 ] ], 
  [ [ 0*Z(2), Z(2^2)^2 ], [ Z(2^2), 0*Z(2) ] ], 
  [ [ 0*Z(2), Z(2^2)^2 ], [ Z(2^2), Z(2)^0 ] ], 
  [ [ 0*Z(2), Z(2^2)^2 ], [ Z(2^2), Z(2^2) ] ], 
  [ [ 0*Z(2), Z(2^2)^2 ], [ Z(2^2), Z(2^2)^2 ] ], 
  [ [ Z(2)^0, 0*Z(2) ], [ 0*Z(2), Z(2)^0 ] ], [ [ Z(2)^0, 0*Z(2) ], [ Z(2)^0, Z(2)^0 ] ],
  [ [ Z(2)^0, 0*Z(2) ], [ Z(2^2), Z(2)^0 ] ], 
  [ [ Z(2)^0, 0*Z(2) ], [ Z(2^2)^2, Z(2)^0 ] ], 
  [ [ Z(2)^0, Z(2)^0 ], [ 0*Z(2), Z(2)^0 ] ], [ [ Z(2)^0, Z(2)^0 ], [ Z(2)^0, 0*Z(2) ] ],
  [ [ Z(2)^0, Z(2)^0 ], [ Z(2^2), Z(2^2)^2 ] ], 
  [ [ Z(2)^0, Z(2)^0 ], [ Z(2^2)^2, Z(2^2) ] ], 
  [ [ Z(2)^0, Z(2^2) ], [ 0*Z(2), Z(2)^0 ] ], 
  [ [ Z(2)^0, Z(2^2) ], [ Z(2)^0, Z(2^2)^2 ] ], 
  [ [ Z(2)^0, Z(2^2) ], [ Z(2^2), Z(2^2) ] ], 
  [ [ Z(2)^0, Z(2^2) ], [ Z(2^2)^2, 0*Z(2) ] ], 
  [ [ Z(2)^0, Z(2^2)^2 ], [ 0*Z(2), Z(2)^0 ] ], 
  [ [ Z(2)^0, Z(2^2)^2 ], [ Z(2)^0, Z(2^2) ] ], 
  [ [ Z(2)^0, Z(2^2)^2 ], [ Z(2^2), 0*Z(2) ] ], 
  [ [ Z(2)^0, Z(2^2)^2 ], [ Z(2^2)^2, Z(2^2)^2 ] ], 
  [ [ Z(2^2), 0*Z(2) ], [ 0*Z(2), Z(2^2)^2 ] ], 
  [ [ Z(2^2), 0*Z(2) ], [ Z(2)^0, Z(2^2)^2 ] ], 
  [ [ Z(2^2), 0*Z(2) ], [ Z(2^2), Z(2^2)^2 ] ], 
  [ [ Z(2^2), 0*Z(2) ], [ Z(2^2)^2, Z(2^2)^2 ] ], 
  [ [ Z(2^2), Z(2)^0 ], [ 0*Z(2), Z(2^2)^2 ] ], 
  [ [ Z(2^2), Z(2)^0 ], [ Z(2)^0, 0*Z(2) ] ], [ [ Z(2^2), Z(2)^0 ], [ Z(2^2), Z(2^2) ] ],
  [ [ Z(2^2), Z(2)^0 ], [ Z(2^2)^2, Z(2)^0 ] ], 
  [ [ Z(2^2), Z(2^2) ], [ 0*Z(2), Z(2^2)^2 ] ], 
  [ [ Z(2^2), Z(2^2) ], [ Z(2)^0, Z(2^2) ] ], [ [ Z(2^2), Z(2^2) ], [ Z(2^2), Z(2)^0 ] ],
  [ [ Z(2^2), Z(2^2) ], [ Z(2^2)^2, 0*Z(2) ] ], 
  [ [ Z(2^2), Z(2^2)^2 ], [ 0*Z(2), Z(2^2)^2 ] ], 
  [ [ Z(2^2), Z(2^2)^2 ], [ Z(2)^0, Z(2)^0 ] ], 
  [ [ Z(2^2), Z(2^2)^2 ], [ Z(2^2), 0*Z(2) ] ], 
  [ [ Z(2^2), Z(2^2)^2 ], [ Z(2^2)^2, Z(2^2) ] ], 
  [ [ Z(2^2)^2, 0*Z(2) ], [ 0*Z(2), Z(2^2) ] ], 
  [ [ Z(2^2)^2, 0*Z(2) ], [ Z(2)^0, Z(2^2) ] ], 
  [ [ Z(2^2)^2, 0*Z(2) ], [ Z(2^2), Z(2^2) ] ], 
  [ [ Z(2^2)^2, 0*Z(2) ], [ Z(2^2)^2, Z(2^2) ] ], 
  [ [ Z(2^2)^2, Z(2)^0 ], [ 0*Z(2), Z(2^2) ] ], 
  [ [ Z(2^2)^2, Z(2)^0 ], [ Z(2)^0, 0*Z(2) ] ], 
  [ [ Z(2^2)^2, Z(2)^0 ], [ Z(2^2), Z(2)^0 ] ], 
  [ [ Z(2^2)^2, Z(2)^0 ], [ Z(2^2)^2, Z(2^2)^2 ] ], 
  [ [ Z(2^2)^2, Z(2^2) ], [ 0*Z(2), Z(2^2) ] ], 
  [ [ Z(2^2)^2, Z(2^2) ], [ Z(2)^0, Z(2)^0 ] ], 
  [ [ Z(2^2)^2, Z(2^2) ], [ Z(2^2), Z(2^2)^2 ] ], 
  [ [ Z(2^2)^2, Z(2^2) ], [ Z(2^2)^2, 0*Z(2) ] ], 
  [ [ Z(2^2)^2, Z(2^2)^2 ], [ 0*Z(2), Z(2^2) ] ], 
  [ [ Z(2^2)^2, Z(2^2)^2 ], [ Z(2)^0, Z(2^2)^2 ] ], 
  [ [ Z(2^2)^2, Z(2^2)^2 ], [ Z(2^2), 0*Z(2) ] ], 
  [ [ Z(2^2)^2, Z(2^2)^2 ], [ Z(2^2)^2, Z(2)^0 ] ] ]
gap> psl25 := PSL(2,5);
Group([ (3,5)(4,6), (1,2,5)(3,4,6) ])
gap> Elements(psl25);
[ (), (3,5)(4,6), (2,3)(4,5), (2,3,4,6,5), (2,4)(5,6), (2,4,5,3,6), (2,5,6,4,3), 
  (2,5)(3,6), (2,6)(3,4), (2,6,3,5,4), (1,2)(4,6), (1,2)(3,5), (1,2,3)(4,5,6), 
  (1,2,3,6,5), (1,2,4)(3,5,6), (1,2,4,3,6), (1,2,5,4,3), (1,2,5)(3,4,6), (1,2,6,5,4), 
  (1,2,6)(3,4,5), (1,3,2)(4,6,5), (1,3,4,5,2), (1,3)(5,6), (1,3,6,4,5), (1,3)(2,4), 
  (1,3,5)(2,4,6), (1,3,4)(2,5,6), (1,3,6)(2,5,4), (1,3,2,6,4), (1,3,5,2,6), (1,4,5,6,2), 
  (1,4,2)(3,6,5), (1,4,3,5,6), (1,4)(3,6), (1,4,6,2,3), (1,4,2,3,5), (1,4,6)(2,5,3), 
  (1,4)(2,5), (1,4,3)(2,6,5), (1,4,5)(2,6,3), (1,5,6,3,2), (1,5,2)(3,6,4), (1,5,4,6,3), 
  (1,5)(3,4), (1,5,6)(2,3,4), (1,5,4)(2,3,6), (1,5,3,2,4), (1,5,2,4,6), (1,5,3)(2,6,4), 
  (1,5)(2,6), (1,6,3,4,2), (1,6,2)(3,5,4), (1,6)(4,5), (1,6,5,3,4), (1,6)(2,3), 
  (1,6,4)(2,3,5), (1,6,3)(2,4,5), (1,6,5)(2,4,3), (1,6,2,5,3), (1,6,4,2,5) ]
gap> IsomorphismTypeFiniteSimpleGroup(a5);
Variable: 'IsomorphismTypeFiniteSimpleGroup' must have a value

gap> IsomorphismTypeInfoFiniteSimpleGroup(a5);
rec( series := "A", parameter := 5, 
  name := "A(5) ~ A(1,4) = L(2,4) ~ B(1,4) = O(3,4) ~ C(1,4) = S(2,4) ~ 2A(1,4) = U(2,4) \
~ A(1,5) = L(2,5) ~ B(1,5) = O(3,5) ~ C(1,5) = S(2,5) ~ 2A(1,5) = U(2,5)" )
gap> IsomorphismTypeInfoFiniteSimpleGroup(psl25);
rec( series := "A", parameter := 5, 
  name := "A(5) ~ A(1,4) = L(2,4) ~ B(1,4) = O(3,4) ~ C(1,4) = S(2,4) ~ 2A(1,4) = U(2,4) \
~ A(1,5) = L(2,5) ~ B(1,5) = O(3,5) ~ C(1,5) = S(2,5) ~ 2A(1,5) = U(2,5)" )
gap> IsomorphismTypeInfoFiniteSimpleGroup(psl24);
rec( series := "A", parameter := 5, 
  name := "A(5) ~ A(1,4) = L(2,4) ~ B(1,4) = O(3,4) ~ C(1,4) = S(2,4) ~ 2A(1,4) = U(2,4) \
~ A(1,5) = L(2,5) ~ B(1,5) = O(3,5) ~ C(1,5) = S(2,5) ~ 2A(1,5) = U(2,5)" )
gap> IsomorphismTypeInfoFiniteSimpleGroup(sl24);
rec( series := "A", parameter := 5, 
  name := "A(5) ~ A(1,4) = L(2,4) ~ B(1,4) = O(3,4) ~ C(1,4) = S(2,4) ~ 2A(1,4) = U(2,4) \
~ A(1,5) = L(2,5) ~ B(1,5) = O(3,5) ~ C(1,5) = S(2,5) ~ 2A(1,5) = U(2,5)" )
gap> IsomorphismTypeInfoFiniteSimpleGroup(sl24) = IsomorphismTypeInfoFiniteSimpleGroup(a5);
true
gap> a5ccls:=ConjugacyClasses(a5);
[ ()^G, (1,2)(3,4)^G, (1,2,3)^G, (1,2,3,4,5)^G, (1,2,3,5,4)^G ]
gap> cenralizers := List(a5ccls, x->Cnetralizer(a5, Representative(x)));
Syntax error: warning: unbound global variable
cenralizers := List(a5ccls, x->Cnetralizer(a5, Representative(x)));
                                          ^
Variable: 'Cnetralizer' must have an assigned value at
return Cnetralizer( a5, Representative( x ) );
 called from
func( elm ) called from
<function>( <arguments> ) called from read-eval-loop
Entering break read-eval-print loop ...
you can 'quit;' to quit to outer loop, or
you can 'return;' after assigning a value to continue
brk> quit;
gap> centralizers := List(a5ccls, x->Centralizer(a5, Representative(x)));
[ Alt( [ 1 .. 5 ] ), Group([ (1,2)(3,4), (1,3)(2,4) ]), Group([ (1,2,3) ]), 
  Group([ (1,2,3,4,5) ]), Group([ (1,2,3,5,4) ]) ]
gap> List(a5ccls, x->Representative(x));
[ (), (1,2)(3,4), (1,2,3), (1,2,3,4,5), (1,2,3,5,4) ]
gap> List(centralizers, x -> Size(x));
[ 60, 4, 3, 5, 5 ]
gap> Elements(centralizers[2]);
[ (), (1,2)(3,4), (1,3)(2,4), (1,4)(2,3) ]
gap> Elements(centralizers[3]);
[ (), (1,2,3), (1,3,2) ]
gap> normalizers := List(centralizers, x->Normalizer(a5, x));
[ Group([ (1,5,4,3,2), (2,4,3) ]), Group([ (1,2)(3,4), (1,3)(2,4), (2,3,4) ]), 
  Group([ (1,2,3), (2,3)(4,5) ]), Group([ (1,2,3,4,5), (2,5)(3,4) ]), 
  Group([ (1,2,3,5,4), (2,4)(3,5) ]) ]
gap> List(normalizers, x -> Size(x));
[ 60, 12, 6, 10, 10 ]
gap> LogTo();
